name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: 'manual-release'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Linux builds
          - name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: kernel
            command: build
          
          - name: linux-x86_64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            bin: kernel
            command: build
          
          - name: linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: kernel
            command: build
          
          # macOS builds - SKIPPED
          # - name: macos-x86_64
          #   os: macos-latest
          #   target: x86_64-apple-darwin
          #   bin: kernel
          #   command: build
          
          # - name: macos-aarch64
          #   os: macos-latest
          #   target: aarch64-apple-darwin
          #   bin: kernel
          #   command: build
          
          # Windows builds
          - name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: kernel.exe
            command: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          # For musl builds
          if [[ "${{ matrix.platform.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
          fi
          # For aarch64 cross-compilation
          if [[ "${{ matrix.platform.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
            echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
            # Set OpenSSL for cross-compilation
            echo "AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_DIR=/usr" >> $GITHUB_ENV
            echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          fi


      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.platform.name }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.platform.name }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ matrix.platform.name }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.platform.name }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ matrix.platform.name }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.platform.name }}-cargo-build-target-

      - name: Create test .env file
        run: |
          echo "BINANCE_API_KEY=test_key" > .env
          echo "BINANCE_API_SECRET=test_secret" >> .env

      - name: Build binary
        run: |
          cargo build --verbose --release --target ${{ matrix.platform.target }} --bin kernel

      - name: Package binary (Unix)
        if: matrix.platform.os != 'windows-latest'
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czf ../../../aurelia-${{ matrix.platform.name }}.tar.gz ${{ matrix.platform.bin }}
          cd -

      - name: Package binary (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target/${{ matrix.platform.target }}/release
          7z a ../../../aurelia-${{ matrix.platform.name }}.zip ${{ matrix.platform.bin }}
          cd ../../../

      - name: Generate SHA256 (Unix)
        if: matrix.platform.os != 'windows-latest'
        shell: bash
        run: |
          if [[ "${{ matrix.platform.os }}" == "macos-latest" ]]; then
            shasum -a 256 aurelia-${{ matrix.platform.name }}.tar.gz > aurelia-${{ matrix.platform.name }}.tar.gz.sha256
          else
            sha256sum aurelia-${{ matrix.platform.name }}.tar.gz > aurelia-${{ matrix.platform.name }}.tar.gz.sha256
          fi

      - name: Generate SHA256 (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          $hash = (Get-FileHash -Path "aurelia-${{ matrix.platform.name }}.zip" -Algorithm SHA256).Hash
          "$hash  aurelia-${{ matrix.platform.name }}.zip" | Out-File -FilePath "aurelia-${{ matrix.platform.name }}.zip.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aurelia-${{ matrix.platform.name }}
          path: |
            aurelia-${{ matrix.platform.name }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.tag_name }}
          name: Release ${{ github.ref_name || github.event.inputs.tag_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            # Aurelia Release
            
            ## 下载说明 / Download Instructions
            
            ### Linux
            - `aurelia-linux-x86_64.tar.gz` - 标准Linux x86_64版本 (Ubuntu, Debian, CentOS等)
            - `aurelia-linux-x86_64-musl.tar.gz` - 静态链接版本，适用于Alpine Linux或需要更好兼容性的场景
            - `aurelia-linux-aarch64.tar.gz` - ARM64版本 (树莓派4, AWS Graviton等)
            
            ### Windows
            - `aurelia-windows-x86_64.zip` - Windows 64位
            
            ## 安装方法 / Installation
            
            ### Linux/macOS
            ```bash
            # 下载对应平台的版本
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name || github.event.inputs.tag_name }}/aurelia-linux-x86_64.tar.gz
            
            # 解压
            tar xzf aurelia-linux-x86_64.tar.gz
            
            # 添加执行权限
            chmod +x kernel
            
            # 运行
            ./kernel
            ```
            
            ### Windows
            ```powershell
            # 下载并解压zip文件
            # 运行 kernel.exe
            ```
            
            ## 验证文件完整性 / Verify File Integrity
            
            每个文件都附带 `.sha256` 校验文件，可以用来验证下载的完整性：
            
            ```bash
            sha256sum -c aurelia-linux-x86_64.tar.gz.sha256
            ```
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.sha256