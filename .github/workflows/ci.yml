name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: [self-hosted, linux, x64, docker, aurelia]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Create test .env file
        run: |
          echo "BINANCE_API_KEY=test_key" > .env
          echo "BINANCE_API_SECRET=test_secret" >> .env

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy -- -D warnings

  build-binary:
    name: Build Binary
    runs-on: [self-hosted, linux, x64, docker, aurelia]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Create test .env file
        run: |
          echo "BINANCE_API_KEY=test_key" > .env
          echo "BINANCE_API_SECRET=test_secret" >> .env

      - name: Build release binary
        run: cargo build --release --target x86_64-unknown-linux-gnu --bin kernel

      - name: Test binary exists
        run: |
          ls -la target/x86_64-unknown-linux-gnu/release/
          test -f target/x86_64-unknown-linux-gnu/release/kernel
