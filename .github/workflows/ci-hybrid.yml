name: CI (Hybrid)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      use_self_hosted:
        description: 'Use self-hosted runners'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Determine which runner to use
  setup:
    name: Setup Runner Selection
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.select.outputs.runner }}
    steps:
      - id: select
        run: |
          if [[ "${{ github.event.inputs.use_self_hosted }}" == "true" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "runner=[\"self-hosted\", \"linux\", \"x64\", \"docker\", \"aurelia\", \"prod\"]" >> $GITHUB_OUTPUT
          else
            echo "runner=ubuntu-latest" >> $GITHUB_OUTPUT
          fi

  test:
    name: Test
    needs: setup
    runs-on: ${{ fromJson(needs.setup.outputs.runner) }}
    strategy:
      matrix:
        rust: [stable, beta]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (GitHub Runner)
        if: ${{ !contains(fromJson(needs.setup.outputs.runner), 'self-hosted') }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Rust (Self-Hosted)
        if: ${{ contains(fromJson(needs.setup.outputs.runner), 'self-hosted') }}
        run: |
          rustup default ${{ matrix.rust }}
          rustup update

      - name: Cache cargo (GitHub Runner)
        if: ${{ !contains(fromJson(needs.setup.outputs.runner), 'self-hosted') }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: Create test .env file
        run: |
          echo "BINANCE_API_KEY=test_key" > .env
          echo "BINANCE_API_SECRET=test_secret" >> .env

      - name: Build
        run: cargo build --all --verbose

      - name: Run tests
        run: cargo test --all --verbose

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  build-release:
    name: Build Release Binaries
    needs: [setup, test]
    if: github.ref == 'refs/heads/main'
    runs-on: ${{ fromJson(needs.setup.outputs.runner) }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - target: aarch64-unknown-linux-gnu
            name: linux-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        run: |
          rustup target add ${{ matrix.target }}

      - name: Build with cross (Self-Hosted)
        if: ${{ contains(fromJson(needs.setup.outputs.runner), 'self-hosted') }}
        run: |
          cross build --release --target ${{ matrix.target }} --bin kernel

      - name: Build with cargo (GitHub Runner)
        if: ${{ !contains(fromJson(needs.setup.outputs.runner), 'self-hosted') }}
        run: |
          cargo build --release --target ${{ matrix.target }} --bin kernel

      - name: Package binary
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/kernel artifacts/aurelia-${{ matrix.name }}
          tar -czf aurelia-${{ matrix.name }}.tar.gz -C artifacts aurelia-${{ matrix.name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aurelia-${{ matrix.name }}
          path: aurelia-${{ matrix.name }}.tar.gz

  notify:
    name: Notify Build Status
    needs: [test, build-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.test.result }}" == "success" ]] && [[ "${{ needs.build-release.result }}" == "success" || "${{ needs.build-release.result }}" == "skipped" ]]; then
            echo "✅ CI passed successfully"
          else
            echo "❌ CI failed"
            exit 1
          fi